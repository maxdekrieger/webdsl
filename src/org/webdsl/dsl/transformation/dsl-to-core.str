module org/webdsl/dsl/transformation/dsl-to-core

imports
  libstrategolib
  libjava-front

imports
  libwebdsl-front
  org/webdsl/dsl/transformation/-
  org/webdsl/dsl/analysis/-
  org/webdsl/dsl/typechecker/-
  org/webdsl/dsl/modules/-
  org/webdsl/dsl/languages/composition
  

imports
  org/webdsl/dsl/transformation/desugar-entities
  org/webdsl/dsl/write-files/max-ir-files


strategies

  dsl-to-core =
      dsl-to-core-analysis
    ; if FoundErrors then <exit> 1 end //exit if parsing error in modules, exit here instead of in dsl-to-core-analysis for compatibility with editor support
    ; if-only-typechecking(<exit> 0)
    ; dsl-to-core-generation

  dsl-to-core-analysis =
      stage((import-modules <+ add-error(|"Main .app file needs to start with \"application\""))|"importing modules")
    ; try(where(DebugPrintSourceTree; pp-aterm(!"Source AST: "); debug))
    ; if not(FoundErrors) //stop if parsing error in modules
      then
        remove-string-position-annos
        ; stage(expand-templates|"expand templates")
        ; stage(typecheck|"typechecking")
      end
      
   dsl-to-core-generation: before -> result
    where
	      removed-pos-annos := <remove-position-annos> before
	    ; myAfter := <stage(desugar-entities|"desugar entities")> removed-pos-annos
	    ; after := <stage(desugar-top|"model-to-model")> removed-pos-annos
	    ; result := <if-extra-typechecking(stage(typecheck|"extra typechecking")) ; stage(access-control-stage | "access control") ; check-for-ajax ; stage(analyze-all|"performing analysis")> after
	    ; <write-ir-file> (removed-pos-annos, "/Users/maxdekrieger/eclipse-workspace/webdslcompilertest/ir/1-before.aterm")
      ; <write-ir-file> (myAfter, "/Users/maxdekrieger/eclipse-workspace/webdslcompilertest/ir/2-new.aterm")
      ; <write-ir-file> (after, "/Users/maxdekrieger/eclipse-workspace/webdslcompilertest/ir/3-correct.aterm")

strategies // IDE Plugin stuff

  webdsl-collect-all-errors =
    {| AllErrors, AllWarnings:
      rules(
        // Override the error reporting behavior to collect errors
        AddError(|msgs):   node -> node where rules(AllErrors   :+= (node, <error-to-string> msgs))
        AddWarning(|msgs): node -> node where rules(AllWarnings :+= (node, <error-to-string> msgs))
      )
    ; with(
        dsl-to-core-analysis
      )
    ; !(<bagof-AllErrors <+ ![]>, <bagof-AllWarnings <+ ![]>, [])
    |}

strategies

  remove-position-annos = remove-position-annos(keep-position-anno)
