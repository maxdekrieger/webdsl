module org/webdsl/dsl/to-java-servlet/for-filter

imports
  libwebdsl-front
  org/webdsl/dsl/to-java-servlet/java-code

rules

  for-filter-by-code(|x, srt, t, x_list) :
    fltr -> bstm* |[
      bstm_where*
      bstm_order*
      bstm_limit*
    ]|
    with  bstm_where* := <skip-where <+ for-filter-by-code-where(|x, t, x_list)> fltr
        ; bstm_order* := <skip-orderby <+ for-filter-by-code-order-by(|x, srt, t, x_list)> fltr
        ; bstm_limit* := <skip-limit <+ for-filter-by-code-limit(|x, t, x_list)> fltr

  skip-where   = (?Filter(True(), _, _) <+ ?None()); ![]
  skip-orderby = (?Filter(_, NoOrder(), _) <+ ?None()); ![]
  skip-limit   = (?Filter(_, _, Limit(Int("-1"),Int("0"))) <+ ?None()); ![]

  for-filter-by-code-where(|x, t, x_list) :
    Filter(wherecl, _, _) -> bstm* |[
      java.util.ArrayList<t> x_filtered = new java.util.ArrayList<t>(x_list.size());
      ~*<wrap-in-for-loop(|x_i,x,t,expr|[ x_list ]|)> bstm*|[
        if(e2) {
          x_filtered.add(x);
        }
      ]|
      x_list = x_filtered;
    ]|
    with  e2 := <expression-to-java-servlet> wherecl
        ; x_i := <newname-webdsl> "i"
        ; x_filtered := <newname-webdsl> "filtered"

  for-filter-by-code-order-by(|x, srt, t, x_list) :
    Filter(wherecl, orderby*, limit) -> bstm* |[
      bstm1*  // local variables used within, but defined outside innerclass have to be final
      java.util.Collections.sort(x_list, new java.util.Comparator<t>() {
        public int compare(t o1, t o2) {
          bstm2*
        }
      });
    ]|
    with  (orderby1*, bstm1*) := <map(for-filter-by-code-order-by-vars(|x)); unzip; (id, concat)> orderby*
        ; bstm2* := <foldr( for-filter-by-code-order-by-fold(|x) | bstm*|[ return 0; ]| )> orderby1*

  for-filter-by-code-order-by-vars(|x) :
    ordertype#([exp]) -> (ordertype#([exp2]), bstm*)
    with  exp1 := <alltd(\ varY@Var(y) -> NameChange(varY,y1) where <get-type-anno; not(?EntitySort(_))> varY; <not(?x)> y; y1 := <newname-webdsl> y \)> exp
        ; bstm* := <collect({\ NameChange(varY@Var(y),y1) -> java|[ final t y1 = y; ]| where t := <get-type-anno;java-type> varY  \})> exp1
        ; exp2 := <alltd({\ NameChange(Var(y3){anno*},y1) -> Var(y1){anno*} \})> exp1

  for-filter-by-code-order-by-fold(|x) :
    (ordertype#([exp]), bstm_wrapped*) -> bstm* |[
      int x_result;
      if( e1 == null && e2 == null ){
        x_result = 0;
      }
      else if( e1 == null ){
        x_result = 1;
      }
      else if( e2 == null ){
        x_result = -1;
      }
      else{
        x_result = e_result;
      }
      if(x_result == 0){
        bstm_wrapped*
      }
      else {
        return x_result;
      }
    ]|
    with  x_result := <newname-webdsl> "res"
        ; e1 := <alltd(\Var(y){anno*} -> Var("o1"){anno*} where <?x> y\);expression-to-java-servlet> exp
        ; e2 := <alltd(\Var(y){anno*} -> Var("o2"){anno*} where <?x> y\);expression-to-java-servlet> exp
        ; if <?"OrderDescending"> ordertype
          then e_result := java|[ e2.compareTo(e1) ]|
          else e_result := java|[ e1.compareTo(e2) ]| end

signature constructors
  NameChange : Term * Term -> Term 

rules

  for-filter-by-code-limit(|x, t, x_list) :
    f@Filter(_, _, Limit(limit,offset)) -> bstm* |[
      int x_lim = e1;
      int x_off = e2;
      java.util.ArrayList<t> x_filtered = new java.util.ArrayList<t>( x_list.size() );
      ~*<wrap-in-for-loop(|x_i,x,t,expr|[ x_list ]|)> bstm*|[
        ~*<for-filter-by-code-limit-offset(|x, t, x_filtered, x_lim, x_off, x_i)> f
      ]|
      x_list = x_filtered;
    ]|
    with  e1 := <expression-to-java-servlet> limit
        ; e2 := <expression-to-java-servlet> offset
        ; x_i := <newname-webdsl> "i"
        ; x_lim := <newname-webdsl> "limit"
        ; x_off := <newname-webdsl> "offset"
        ; x_filtered := <newname-webdsl> "filtered"

  for-filter-by-code-limit-offset(|x, t, x_filtered, x_lim, x_off, x_i) :
    Filter(_, _, Limit(limit,offset)) -> bstm* |[
      if(x_i >= x_off){
        ~*<for-filter-by-code-limit-limit(|x, t, x_filtered, x_lim)>
      }
    ]|
    where not(<?Int("0")> offset)

  for-filter-by-code-limit-offset(|x, t, x_filtered, x_lim, x_off, x_i) :
    Filter(_, _, Limit(limit,offset)) ->
    <for-filter-by-code-limit-limit(|x, t, x_filtered, x_lim)>
    where <?Int("0")> offset

  for-filter-by-code-limit-limit(|x, t, x_filtered, x_lim) :
    Filter(_, _, Limit(limit,offset)) -> bstm* |[
      if(x_lim > 0) {
        x_filtered.add(x);
      }
      x_lim--;
    ]|
    where not(<?Int("-1")> limit)

  for-filter-by-code-limit-limit(|x, t, x_filtered, x_lim) :
    Filter(_, _, Limit(limit,offset)) -> bstm* |[ x_filtered.add(x); ]|
    where <?Int("-1")> limit
