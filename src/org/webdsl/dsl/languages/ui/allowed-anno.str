module org/webdsl/dsl/languages/ui/allowed-anno

/**
 *  'allowed=exp' annotation
 */
rules
/*
  extend-property-declare(|x_class) :
    prop -> <fail> //each extend must fail so they all get evaluated
    where get-property-annos; fetch(?AllowedAnno(e1))
    with x_name := <get-property-name; allowed-collection-function-name> prop
       ; srt := <get-property-type; try-strip-generic-sort> prop
       ; <declare-function(|x_class)> 
           fun |[ 
             function x_name():List<srt> { } 
           ]|
*/

  extend-property-declare(|x_class) :
    prop -> <fail> //each extend must fail so they all get evaluated
    where <get-property-kind; (?Ref() <+ ?Comp())> prop
    with x_name := <get-property-name; allowed-collection-function-name> prop
       ; srt := <get-property-type; try-strip-generic-sort> prop
       ; <declare-function(|x_class)> 
           fun |[ 
             function x_name():List<srt> { } 
           ]|

rules

// TODO constraint: 'allowed=' collection must be List property type
// constraint: only 1 'allowed'
// constraint: overlap with generated function below

strategies

  desugar-ui :
    Entity(x_class,super, entbodydecs1){anno*} -> <rename> Entity(x_class,super, entbodydecs2){anno*} 
    where <oncetd(not-translated-allowed-anno)> entbodydecs1
    with  entbodydecs2 := <get-all-function-allowed-annotation(|x_class)> entbodydecs1
    
  desugar-ui : 
    EntityNoSuper(x_class, entbodydecs1){anno*} -> <rename> EntityNoSuper(x_class, entbodydecs2){anno*} 
    where <oncetd(not-translated-allowed-anno)> entbodydecs1
    with  entbodydecs2 := <get-all-function-allowed-annotation(|x_class)> entbodydecs1
    
  desugar-ui :
    SessionEntity(x_class, entbodydecs1){anno*} -> <rename> SessionEntity(x_class, entbodydecs2){anno*} 
    where <oncetd(not-translated-allowed-anno)> entbodydecs1
    with  entbodydecs2 := <get-all-function-allowed-annotation(|x_class)> entbodydecs1
   
signature
  constructors 
    AllowedAnnotationFunctionGenerated: Term
  
rules 

  not-translated-allowed-anno : 
    prop@Property(x, k, srt, annos) -> prop
    where /*<fetch(?AllowedAnno(e1))> annos
        ; */<not(fetch(AllowedAnnotationFunctionGenerated))> annos
        ; <?Ref() <+ ?Comp()> k

  get-all-function-allowed-annotation(|x_class):
    entbodydecs1 -> entbodydecs2
    with  tuples := <map(get-function-allowed-annotation(|x_class) <+ !(<id>,[]) )> entbodydecs1
        ; (olddefs,funcs1) := <unzip> tuples
        ; funcs2 := <flatten-list> funcs1
        ; entbodydecs2 := <concat> [olddefs,funcs2]

  get-function-allowed-annotation(|x_class) :  
     Property(x, k, srt, annos){anno*} -> 
    (Property(x, k, srt, [AllowedAnnotationFunctionGenerated()|annos]){anno*}
    ,result)
    where not-translated-allowed-anno
    with  srt1@SimpleSort(sortname) := <try-strip-generic-sort> srt
        ; (<fetch(?AllowedAnno(e1))> annos <+ e1 := Call(Var(sortname),"all",[]))
        // Var(sortname) breaks if any property in this entity overlaps with entity name, e.g. 'S:{S}', prevented in check-entity-name-overlap
        ; x_name := <allowed-collection-function-name> x
        ; result := 
            fun |[ 
              function x_name():List<srt1> { return e1; } 
            ]|

  allowed-collection-function-name : x -> <concat-strings> ["allowed",<capitalize-string> x]
